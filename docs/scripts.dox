/*! \page scripts Scripts

\section scripts_overview Overview

JamPlus ships with several useful scripts for the generation of Jamfiles from various sources and other tasks.  Those scripts can be found in the <tt>bin/scripts/</tt> directory, but they are run by executing the Jam executable with certain command-line options.



\section extractbuildmodules Extract Build Modules

\b extractbuildmodules dumps out the embedded modules and build support files originally collected during the build process (from the <tt>jamplus/bin/</tt> directory).

\b extractbuildmodules accepts an optional argument, the destination path. If the destination path is not provided, the build files will be written into the current directory. \b extractbuildmodules will not overwrite an existing file.

When the Jam executable resides in the same directory as the extracted <tt>Jambase.jam</tt> or one directory level deeper than the <tt>Jambase.jam</tt>, an invocation of the Jam executable will use the build files on disk before falling back to its embedded versions.

\code
# Extract to the current directory.
jam --extractbuildmodules

# Extract to the directory above the executable's directory (assuming it is in jamplus/bin/macosx64):
[~/jamplus/bin/macosx64]jam --extractbuildmodules ..
\endcode







\section folderstojamfile FoldersToJamfile

From the specified directory, \b FoldersToJamfile recurses the directory structure and creates a Jamfile with all found files.  A source group is generated automatically for every directory.

\b FoldersToJamfile accepts two arguments, the start path and the destination Jamfile.  It is run like so:

\code
jam --folderstojamfile c:/path/to/start/at Jamfile.jam
\endcode

The generated Jamfile will need some basic clean up, and until the clean up has occurred, it will not run.








\section generate Generate

In the current directory, <tt>jam --generate</tt> writes a simple <tt>Jamfile.jam</tt> (if it does not already exist) with build instructions for the C/C++ source files residing in the directory.

It is run like so:

\code
jam --generate
\endcode

The generated Jamfile may need some clean up.








\section vcprojtojamfile VCProjToJamfile

\b VCProjToJamfile is capable of reading a .vcproj file from Visual Studio 2003, 2005, or 2008, and writing a Jamfile bearing the folder structure and file contents of the .vcproj.

\b VCProjToJamfile accepts two arguments, the source vcproj and destination Jamfile.

\code
jam --vcprojtojamfile Misc.vcproj Misc.jam
\endcode








\section vcxprojtojamfile VCXProjToJamfile

\b VCXProjToJamfile is capable of reading a .vcxproj file from Visual Studio 2010 or 2012 and writing a Jamfile bearing the folder structure and file contents of the .vcxproj.

\b VCXProjToJamfile accepts two arguments, the source vcproj and destination Jamfile.

\code
jam --vcxprojtojamfile Misc.vcproj Misc.jam
\endcode

*/

